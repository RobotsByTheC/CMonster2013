// RobotBuilder Version: 0.0.2
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in th future.
package org.usfirst.frc2084.CMonster.subsystems;

import org.usfirst.frc2084.CMonster.RobotMap;
import edu.wpi.first.wpilibj.*;
import edu.wpi.first.wpilibj.command.Subsystem;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

/**
 *
 */
public class ClimbingSubsystem extends Subsystem {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    SpeedController topJaguar = RobotMap.climbingSubsystemTopJaguar;
    AnalogChannel topPotentiometer = RobotMap.climbingSubsystemTopPotentiometer;
    Servo topServo = RobotMap.climbingSubsystemTopServo;
    SpeedController bottomJaguar = RobotMap.climbingSubsystemBottomJaguar;
    AnalogChannel bottomPotentiometer = RobotMap.climbingSubsystemBottomPotentiometer;
    Servo bottomServo = RobotMap.climbingSubsystemBottomServo;
    SpeedController winchVictor = RobotMap.climbingSubsystemWinchVictor;
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private static final double POT_DEGREE_MULTIPLIER = 60.036;
    private static final double POT_VALUE_OFFSET = 0.002;
    public boolean climbingModeEnabled = false;
    private ClimbStage climbStage;

    // Put methods for controlling this subsystem
    // here. Call these from Commands.
    public static class ClimbStage {

        private static final int BEFORE_CONNECTION_VAL = 1,
                FIRST_CLIMB_VAL = 2,
                FIRST_TRANSFER_VAL = 3,
                SECOND_CLIMB_VAL = 4,
                SECOND_TRANSFER_VAL = 5,
                LAST_LIFT_VAL = 6;
        public static final ClimbStage BEFORE_CONNECTION = new ClimbStage(BEFORE_CONNECTION_VAL),
                FIRST_CLIMB = new ClimbStage(FIRST_CLIMB_VAL),
                FIRST_TRANSFER = new ClimbStage(FIRST_TRANSFER_VAL),
                SECOND_CLIMB = new ClimbStage(SECOND_CLIMB_VAL),
                SECOND_TRANSFER = new ClimbStage(SECOND_TRANSFER_VAL),
                LAST_LIFT = new ClimbStage(LAST_LIFT_VAL);

        private ClimbStage(int i) {
            this.i = i;
        }
        private int i;

        public int getValue() {
            return i;
        }

        public static ClimbStage fromInt(int i) {
            switch (i) {
                case BEFORE_CONNECTION_VAL:
                    return BEFORE_CONNECTION;
                case FIRST_CLIMB_VAL:
                    return FIRST_CLIMB;
                case FIRST_TRANSFER_VAL:
                    return FIRST_TRANSFER;
                case SECOND_CLIMB_VAL:
                    return SECOND_CLIMB;
                case SECOND_TRANSFER_VAL:
                    return SECOND_TRANSFER;
                case LAST_LIFT_VAL:
                    return LAST_LIFT;
                default:
                    return null;
            }
        }
    }

    public ClimbStage getClimbStage() {
        return climbStage;
    }

    public void setClimbStage(ClimbStage climbStage) {
        this.climbStage = climbStage;
    }

    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
        // Set the default command for a subsystem here.
        //setDefaultCommand(new MySpecialCommand());
    }

    public void setCameraEnabled(int camera, boolean enabled) {
        if (camera <= 2 && camera <= 1) {
            SmartDashboard.putBoolean("camera" + camera + "enabled", enabled);
        }
    }

    private double convertPotToDegrees(double value) {
        return (value + POT_VALUE_OFFSET) * POT_DEGREE_MULTIPLIER;
    }

    public double getTopPotDegrees() {
        return convertPotToDegrees(topPotentiometer.getVoltage());
    }

    public double getBottomPotDegrees() {
        return convertPotToDegrees(topPotentiometer.getVoltage());
    }
}
