// RobotBuilder Version: 0.0.2
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.
package org.usfirst.frc2084.CMonster;
import edu.wpi.first.wpilibj.*;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
/**
 * The RobotMap is a mapping from the ports sensors and actuators are wired into
 * to a variable name. This provides flexibility changing wiring, makes checking
 * the wiring easier and significantly reduces the number of magic numbers
 * floating around.
 */
public class RobotMap {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static AnalogChannel driveBaseSubsystemUltrasonicInput;
    public static SpeedController driveBaseSubsystemRightJaguar;
    public static SpeedController driveBaseSubsystemLeftJaguar;
    public static RobotDrive driveBaseSubsystemRobotDrive;
    public static SpeedController climbingSubsystemTopJaguar;
    public static AnalogChannel climbingSubsystemTopPotentiometer;
    public static Servo climbingSubsystemTopServo;
    public static SpeedController climbingSubsystemBottomJaguar;
    public static AnalogChannel climbingSubsystemBottomPotentiometer;
    public static Servo climbingSubsystemBottomServo;
    public static SpeedController climbingSubsystemWinchVictor;
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static void init() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        driveBaseSubsystemUltrasonicInput = new AnalogChannel(1, 3);
	LiveWindow.addSensor("DriveBaseSubsystem", "UltrasonicInput", driveBaseSubsystemUltrasonicInput);
        
        driveBaseSubsystemRightJaguar = new Jaguar(1, 2);
	LiveWindow.addActuator("DriveBaseSubsystem", "Right Jaguar", (Jaguar) driveBaseSubsystemRightJaguar);
        
        driveBaseSubsystemLeftJaguar = new Jaguar(1, 1);
	LiveWindow.addActuator("DriveBaseSubsystem", "Left Jaguar", (Jaguar) driveBaseSubsystemLeftJaguar);
        
        driveBaseSubsystemRobotDrive = new RobotDrive(driveBaseSubsystemLeftJaguar, driveBaseSubsystemRightJaguar);
	
        driveBaseSubsystemRobotDrive.setSafetyEnabled(false);
        driveBaseSubsystemRobotDrive.setExpiration(0.1);
        driveBaseSubsystemRobotDrive.setSensitivity(0.5);
        driveBaseSubsystemRobotDrive.setMaxOutput(1.0);
        driveBaseSubsystemRobotDrive.setInvertedMotor(RobotDrive.MotorType.kRearRight, true);        
        climbingSubsystemTopJaguar = new Jaguar(1, 4);
	LiveWindow.addActuator("ClimbingSubsystem", "Top Jaguar", (Jaguar) climbingSubsystemTopJaguar);
        
        climbingSubsystemTopPotentiometer = new AnalogChannel(1, 1);
	LiveWindow.addSensor("ClimbingSubsystem", "Top Potentiometer", climbingSubsystemTopPotentiometer);
        
        climbingSubsystemTopServo = new Servo(1, 6);
	LiveWindow.addActuator("ClimbingSubsystem", "Top Servo", climbingSubsystemTopServo);
        
        climbingSubsystemBottomJaguar = new Jaguar(1, 5);
	LiveWindow.addActuator("ClimbingSubsystem", "Bottom Jaguar", (Jaguar) climbingSubsystemBottomJaguar);
        
        climbingSubsystemBottomPotentiometer = new AnalogChannel(1, 2);
	LiveWindow.addSensor("ClimbingSubsystem", "Bottom Potentiometer", climbingSubsystemBottomPotentiometer);
        
        climbingSubsystemBottomServo = new Servo(1, 7);
	LiveWindow.addActuator("ClimbingSubsystem", "Bottom Servo", climbingSubsystemBottomServo);
        
        climbingSubsystemWinchVictor = new Victor(1, 3);
	LiveWindow.addActuator("ClimbingSubsystem", "Winch Victor", (Victor) climbingSubsystemWinchVictor);
        
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }
}
